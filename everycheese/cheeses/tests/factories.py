"""
Cool library
https://factoryboy.readthedocs.io/
https://github.com/FactoryBoy/factory_boy
CheeseFactory generates Cheese objects (model instances).
Think of it like Cheese.objects.create(),
but where the cheese data is autogenerated.
instanciate with cheese = CheeseFactory()
that’s no good for looking at <Cheese: dEiwndWjefsq>,
it’s great for unit testing.
we can optionally specify the value of one of the fields
cheese = CheeseFactory(name="Sample Cheese From Factory")
bulk generation:
for x in range(10):
    CheeseFactory(name=f"Sample Cheese {x}")
puis pr delete: Cheese.objects.filter(name__startswith='Sample').delete()
sauf si dans test ou c fait automatiquement
Factories like CheeseFactory are much more eﬀicient and less error-
prone to create test data with.
Besides unit testing, factories can be used in place of fixtures.
You can call CheeseFactory() in a loop.
"""

from django.template.defaultfilters import slugify

import factory
import factory.fuzzy

from ..models import Cheese

class CheeseFactory(factory.django.DjangoModelFactory):
    name = factory.fuzzy.FuzzyText()
    slug = factory.LazyAttribute(lambda obj: slugify(obj.name))
    description = factory.Faker(
        'paragraph', nb_sentences=3, variable_nb_sentences=True)
    firmness = factory.fuzzy.FuzzyChoice([x[0] for x in Cheese.Firmness.choices]
                                         )

    class Meta:
        model = Cheese
